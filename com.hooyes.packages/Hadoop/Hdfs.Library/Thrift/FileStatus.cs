/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;

namespace Hdfs.Library
{

  [Serializable]
  public partial class FileStatus : TBase
  {
    private string _path;
    private long _length;
    private bool _isdir;
    private short _block_replication;
    private long _blocksize;
    private long _modification_time;
    private string _permission;
    private string _owner;
    private string _group;

    public string Path
    {
      get
      {
        return _path;
      }
      set
      {
        __isset.path = true;
        this._path = value;
      }
    }

    public long Length
    {
      get
      {
        return _length;
      }
      set
      {
        __isset.length = true;
        this._length = value;
      }
    }

    public bool Isdir
    {
      get
      {
        return _isdir;
      }
      set
      {
        __isset.isdir = true;
        this._isdir = value;
      }
    }

    public short Block_replication
    {
      get
      {
        return _block_replication;
      }
      set
      {
        __isset.block_replication = true;
        this._block_replication = value;
      }
    }

    public long Blocksize
    {
      get
      {
        return _blocksize;
      }
      set
      {
        __isset.blocksize = true;
        this._blocksize = value;
      }
    }

    public long Modification_time
    {
      get
      {
        return _modification_time;
      }
      set
      {
        __isset.modification_time = true;
        this._modification_time = value;
      }
    }

    public string Permission
    {
      get
      {
        return _permission;
      }
      set
      {
        __isset.permission = true;
        this._permission = value;
      }
    }

    public string Owner
    {
      get
      {
        return _owner;
      }
      set
      {
        __isset.owner = true;
        this._owner = value;
      }
    }

    public string Group
    {
      get
      {
        return _group;
      }
      set
      {
        __isset.group = true;
        this._group = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool path;
      public bool length;
      public bool isdir;
      public bool block_replication;
      public bool blocksize;
      public bool modification_time;
      public bool permission;
      public bool owner;
      public bool group;
    }

    public FileStatus() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Path = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              Length = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Bool) {
              Isdir = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I16) {
              Block_replication = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              Blocksize = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              Modification_time = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              Permission = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              Owner = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              Group = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("FileStatus");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Path != null && __isset.path) {
        field.Name = "path";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Path);
        oprot.WriteFieldEnd();
      }
      if (__isset.length) {
        field.Name = "length";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Length);
        oprot.WriteFieldEnd();
      }
      if (__isset.isdir) {
        field.Name = "isdir";
        field.Type = TType.Bool;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Isdir);
        oprot.WriteFieldEnd();
      }
      if (__isset.block_replication) {
        field.Name = "block_replication";
        field.Type = TType.I16;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Block_replication);
        oprot.WriteFieldEnd();
      }
      if (__isset.blocksize) {
        field.Name = "blocksize";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Blocksize);
        oprot.WriteFieldEnd();
      }
      if (__isset.modification_time) {
        field.Name = "modification_time";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Modification_time);
        oprot.WriteFieldEnd();
      }
      if (Permission != null && __isset.permission) {
        field.Name = "permission";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Permission);
        oprot.WriteFieldEnd();
      }
      if (Owner != null && __isset.owner) {
        field.Name = "owner";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Owner);
        oprot.WriteFieldEnd();
      }
      if (Group != null && __isset.group) {
        field.Name = "group";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Group);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("FileStatus(");
      sb.Append("Path: ");
      sb.Append(Path);
      sb.Append(",Length: ");
      sb.Append(Length);
      sb.Append(",Isdir: ");
      sb.Append(Isdir);
      sb.Append(",Block_replication: ");
      sb.Append(Block_replication);
      sb.Append(",Blocksize: ");
      sb.Append(Blocksize);
      sb.Append(",Modification_time: ");
      sb.Append(Modification_time);
      sb.Append(",Permission: ");
      sb.Append(Permission);
      sb.Append(",Owner: ");
      sb.Append(Owner);
      sb.Append(",Group: ");
      sb.Append(Group);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
