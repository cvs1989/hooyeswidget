<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>